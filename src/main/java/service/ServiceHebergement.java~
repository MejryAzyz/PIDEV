package service;

import Models.Hebergement;
import Models.Transport;
import tools.MyDataBase;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ServiceHebergement implements IService<Hebergement> {
Connection cnx;
public ServiceHebergement() {
    cnx = MyDataBase.getInstance().getCnx();
}
    @Override
    public void ajouter(Hebergement hebergement) throws SQLException {
        String sql = "insert into hebergement(nom,adresse,capacite,email,telephone,tarif_nuit)"+
                "values('"+hebergement.getNom()+"','"+hebergement.getAdresse()+"','"+hebergement.getCapacite()+"','"+hebergement.getEmail()+"','"+hebergement.getTelephone()+"',"+hebergement.getTarif_nuit()+")";
        Statement st = cnx.createStatement();
        st.executeUpdate(sql);
}
    public int ajouterEtRetournerId(Hebergement hebergement, Connection conn) throws SQLException {
        String query = "INSERT INTO hebergement (nom, adresse, telephone, email, capacite, tarif_nuit) VALUES (?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS)) {
            pstmt.setString(1, hebergement.getNom());
            pstmt.setString(2, hebergement.getAdresse());
            pstmt.setInt(3, hebergement.getTelephone());
            pstmt.setString(4, hebergement.getEmail());
            pstmt.setInt(5, hebergement.getCapacite());
            pstmt.setDouble(6, hebergement.getTarif_nuit());

            pstmt.executeUpdate();

            ResultSet rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                return rs.getInt(1);
            } else {
                throw new SQLException("Impossible de récupérer l'ID de l'hébergement.");
            }
        }
    }



    @Override
    public void supprimer(int id) throws SQLException {
    String sql = "delete from hebergement where id_hebergement=?";
        PreparedStatement pst = cnx.prepareStatement(sql);
        pst.setInt(1,id);
        pst.executeUpdate();
        System.out.println("Hebergement supprimée");
    }
    public int getNombreTotalHebergements() throws SQLException {
        String sql = "SELECT COUNT(*) FROM hebergement";
        Statement st = cnx.createStatement();
        ResultSet rs = st.executeQuery(sql);
        if (rs.next()) {
            return rs.getInt(1);
        }
        return 0;
    }
    public int getCapaciteTotale() throws SQLException {
        String sql = "SELECT SUM(capacite) FROM hebergement";
        Statement st = cnx.createStatement();
        ResultSet rs = st.executeQuery(sql);
        if (rs.next()) {
            return rs.getInt(1);
        }
        return 0;
    }

    public double getTarifMoyenParNuit() throws SQLException {
        String sql = "SELECT AVG(tarif_nuit) FROM hebergement";
        Statement st = cnx.createStatement();
        ResultSet rs = st.executeQuery(sql);
        if (rs.next()) {
            return rs.getDouble(1);
        }
        return 0.0;
    }
    @Override
    public void modifier(Hebergement hebergement) throws SQLException {
        Connection cnx = MyDataBase.getInstance().getCnx(); // Ensure you have a valid connection
        cnx.setAutoCommit(false); // Start transaction

        try {
            // Update the main hebergement details
            String sql = "UPDATE hebergement SET nom = ?, telephone = ?, capacite = ?, adresse = ?, email = ?, tarif_nuit = ? WHERE id_hebergement = ?";
            PreparedStatement ps = cnx.prepareStatement(sql);
            ps.setString(1, hebergement.getNom());
            ps.setInt(2, hebergement.getTelephone());
            ps.setInt(3, hebergement.getCapacite());
            ps.setString(4, hebergement.getAdresse());
            ps.setString(5, hebergement.getEmail());
            ps.setDouble(6, hebergement.getTarif_nuit());
            ps.setInt(7, hebergement.getId_hebergement());
            ps.executeUpdate();

            // Update or insert photo if a new photo URL is provided
            if (hebergement.getPhotoUrl() != null && !hebergement.getPhotoUrl().isEmpty()) {
                String checkPhotoSql = "SELECT COUNT(*) FROM hebergement_photos WHERE hebergement_id = ?";
                PreparedStatement checkPs = cnx.prepareStatement(checkPhotoSql);
                checkPs.setInt(1, hebergement.getId_hebergement());
                ResultSet rs = checkPs.executeQuery();
                rs.next();
                int count = rs.getInt(1);

                if (count > 0) {
                    // Update existing photo record
                    String updatePhotoSql = "UPDATE hebergement_photos SET photo_url = ?, uploaded_at = NOW() WHERE hebergement_id = ?";
                    PreparedStatement updatePs = cnx.prepareStatement(updatePhotoSql);
                    updatePs.setString(1, hebergement.getPhotoUrl());
                    updatePs.setInt(2, hebergement.getId_hebergement());
                    updatePs.executeUpdate();
                } else {
                    // Insert new photo record
                    String insertPhotoSql = "INSERT INTO hebergement_photos (hebergement_id, photo_url, uploaded_at) VALUES (?, ?, NOW())";
                    PreparedStatement insertPs = cnx.prepareStatement(insertPhotoSql);
                    insertPs.setInt(1, hebergement.getId_hebergement());
                    insertPs.setString(2, hebergement.getPhotoUrl());
                    insertPs.executeUpdate();
                }
            }

            cnx.commit(); // Commit transaction if everything is successful
            System.out.println("Hébergement modifié avec succès !");
        } catch (SQLException e) {
            cnx.rollback(); // Rollback transaction if an error occurs
            e.printStackTrace();
            throw new SQLException("Erreur lors de la mise à jour de l'hébergement", e);
        } finally {
            cnx.setAutoCommit(true); // Reset auto-commit
        }
    }




    @Override
    public List<Hebergement> recuperer() throws SQLException {
        String sql = "SELECT h.*, hp.photo_url " +
                "FROM hebergement h " +
                "LEFT JOIN hebergement_photos hp ON h.id_hebergement = hp.hebergement_id " +
                "WHERE hp.id_photo = (SELECT MIN(id_photo) FROM hebergement_photos WHERE hebergement_id = h.id_hebergement)";
        Statement st = cnx.createStatement();
        ResultSet rs = st.executeQuery(sql);
        List<Hebergement> hebergements = new ArrayList<>();
        while (rs.next()) {
            Hebergement hebergement = new Hebergement();
            hebergement.setId_hebergement(rs.getInt("id_hebergement"));
            hebergement.setNom(rs.getString("nom"));
            hebergement.setAdresse(rs.getString("adresse"));
            hebergement.setCapacite(rs.getInt("capacite"));
            hebergement.setEmail(rs.getString("email"));
            hebergement.setTelephone(rs.getInt("telephone"));
            hebergement.setTarif_nuit(rs.getInt("tarif_nuit"));
            hebergement.setPhotoUrl(rs.getString("photo_url"));
            hebergements.add(hebergement);
        }
        return hebergements;
    }


}
