package controllers;

import javafx.animation.TranslateTransition;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;
import Models.Transport;
import service.ServiceTransport;

import java.net.URL;
import java.sql.SQLException;
import java.util.ResourceBundle;

public class GesTransport implements Initializable {


    @FXML
    private TableView<Transport> tabview;

    @FXML
    private TableColumn<Transport, Integer> colId;

    @FXML
    private TableColumn<Transport, String> colType;

    @FXML
    private TableColumn<Transport, Integer> colCapacite;

    @FXML
    private TableColumn<Transport, Double> colPrix;

    @FXML
    private TableColumn<Transport, String> colActions;

    @FXML
    private TextField search_input;

    @FXML
    private Button search_button;

    @FXML
    private Button cancel_search;

    @FXML
    private Button add;

    @FXML
    private VBox sidePanel;

    @FXML
    private ComboBox<String> transportTypeField;

    @FXML
    private TextField transportCapacityField;

    @FXML
    private TextField transportPriceField;

    @FXML
    private Button submitAddButton;

    private ObservableList<Transport> transports = FXCollections.observableArrayList();
    private ServiceTransport serviceTransport = new ServiceTransport();

    @FXML
    void addTransport(ActionEvent event) {
        try {
            // Retrieve selected transport type from ComboBox
            String type = transportTypeField.getValue();
            if (type == null || type.isEmpty()) {
                // Show error if no transport type is selected
                showErrorAlert("Veuillez s√©lectionner un type de transport.");
                return;
            }

            // Check if capacity and price fields are empty
            if (transportCapacityField.getText().isEmpty()) {
                showErrorAlert("Veuillez entrer une capacit√©.");
                return;
            }
            if (transportPriceField.getText().isEmpty()) {
                showErrorAlert("Veuillez entrer un prix.");
                return;
            }

            // Get capacity and price from text fields and validate they are numeric
            int capacite = 0;
            double prix = 0;
            try {
                capacite = Integer.parseInt(transportCapacityField.getText());
                prix = Double.parseDouble(transportPriceField.getText());
            } catch (NumberFormatException e) {
                showErrorAlert("Veuillez entrer des valeurs valides pour la capacit√© et le prix.");
                return;
            }

            // Create and add a new transport object using the input data
            serviceTransport.ajouter(new Transport(type, capacite, prix));

            // Show success alert
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Succ√®s");
            alert.setContentText("Transport ajout√© avec succ√®s !");
            alert.showAndWait();

            // Clear the fields after adding
            clearAddForm();

        } catch (Exception e) {
            // Show generic error alert if any other exception occurs
            showErrorAlert(e.getMessage());
        }
    }


    // Show error alert with a custom message
    private void showErrorAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle("Erreur");
        alert.setContentText(message);
        alert.showAndWait();
    }

    // Close the side panel (optional, depending on your UI design)
    @FXML
    private void closeSidePanel(ActionEvent event) {
        // Slide out the side panel
        TranslateTransition slideOutTransition = new TranslateTransition(Duration.seconds(0.5), sidePanel);
        slideOutTransition.setToX(sidePanel.getWidth()); // Slide out to the right
        slideOutTransition.setOnFinished(e -> sidePanel.setVisible(false));  // Hide the panel after sliding out
        slideOutTransition.play();
    }
    private void handleSubmitUpdate(Transport transport) {
        try {
            // Get the new values from the input fields
            String type = transportTypeField.getValue();
            int capacity = Integer.parseInt(transportCapacityField.getText());
            int price = Integer.parseInt(transportPriceField.getText());

            // Update the transport object (assuming you have an update method in the service)
            transport.setType(type);
            transport.setCapacite(capacity);
            transport.setTarif(price);

            // Call the service to update the transport in the database
            serviceTransport.modifier(transport);

            // Close the side panel and refresh the table
            sidePanel.setVisible(false);
            loadData();  // Reload data to reflect the changes in the table

            // Show success alert
        } catch (NumberFormatException e) {
            // Show error alert if the user enters invalid data
            showErrorAlert("Veuillez entrer des valeurs valides pour la capacit√© et le prix.");
        } catch (Exception e) {
            // Handle other exceptions
            showErrorAlert(e.getMessage());
        }
    }
    private void handleUpdate(Transport transport) {
        // Set the values in the side panel's fields based on the selected transport item
        transportTypeField.setValue(transport.getType());
        transportCapacityField.setText(String.valueOf(transport.getCapacite()));
        transportPriceField.setText(String.valueOf(transport.getTarif()));

        // Show the side panel (slide-in effect)
        sidePanel.setVisible(true);
        TranslateTransition slideInTransition = new TranslateTransition(Duration.seconds(0.5), sidePanel);
        slideInTransition.setToX(0); // Slide in from the right
        slideInTransition.play();

        // Optionally, update the button action to handle the modification
        submitAddButton.setOnAction(event -> handleSubmitUpdate(transport));
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        transportTypeField.getItems().clear();
        transportTypeField.getItems().addAll("Voiture", "Bus", "Taxi", "Van", "VTC");

        // Set up the table columns
        colId.setCellValueFactory(new PropertyValueFactory<>("id_transport"));
        colType.setCellValueFactory(new PropertyValueFactory<>("type"));
        colCapacite.setCellValueFactory(new PropertyValueFactory<>("capacite"));
        colPrix.setCellValueFactory(new PropertyValueFactory<>("tarif"));
        sidePanel.setVisible(false);
        // Add action buttons in the table's row
        colActions.setCellFactory(col -> new TableCell<Transport, String>() {
            @Override
            protected void updateItem(String item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                    return;
                }

                Transport transport = getTableView().getItems().get(getIndex());
                Button btnUpdate = new Button("üîÑ");
                btnUpdate.setStyle("-fx-background-color: #002966; -fx-background-radius: 60; -fx-border-radius: 60;");
                btnUpdate.setPrefHeight(33);
                btnUpdate.setPrefWidth(36);
                btnUpdate.setTextFill(Color.WHITE);
                btnUpdate.setFont(Font.font("System Bold", 15));
                btnUpdate.setOnAction(event -> handleUpdate(transport));

                Button btnDelete = new Button("‚ùå");
                btnDelete.setStyle("-fx-background-color: #002966; -fx-background-radius: 60; -fx-border-radius: 60;");
                btnDelete.setPrefHeight(33);
                btnDelete.setPrefWidth(36);
                btnDelete.setTextFill(Color.WHITE);
                btnDelete.setFont(Font.font("System Bold", 14));
                btnDelete.setOnAction(event -> handleDelete(transport));

                HBox pane = new HBox(btnUpdate, btnDelete);
                pane.setSpacing(10);
                setGraphic(pane);
            }
        });

        // Initial loading of data
        loadData();

        // Dynamic search listener
        search_input.textProperty().addListener((observable, oldValue, newValue) -> {
            filterTransportList(newValue);
        });

        // Reset table when search is cleared
        cancel_search.setOnAction(e -> {
            search_input.clear();
            filterTransportList("");  // Clear the search and reset to show all
        });

        // Adding new transport
        add.setOnAction(this::handleAdd);

        // Submitting new transport
        submitAddButton.setOnAction(this::handleSubmitAdd);
    }

    private void loadData() {
        try {
            transports.setAll(serviceTransport.recuperer());
            tabview.setItems(transports);
        } catch (SQLException ex) {
            ex.printStackTrace();
            showAlert("Erreur lors du chargement des donn√©es.");
        }
    }

    private void filterTransportList(String searchText) {
        ObservableList<Transport> displayedTransports;

        if (searchText == null || searchText.isEmpty()) {
            displayedTransports = FXCollections.observableArrayList(transports);
        } else {
            displayedTransports = FXCollections.observableArrayList();
            for (Transport transport : transports) {
                if (transport.getType().toLowerCase().contains(searchText.toLowerCase()) ||
                        String.valueOf(transport.getCapacite()).contains(searchText) ||
                        String.valueOf(transport.getTarif()).contains(searchText)) {
                    displayedTransports.add(transport);
                }
            }
        }

        tabview.setItems(displayedTransports);
        tabview.refresh(); // Forces re-rendering of the TableView, including the action buttons
    }

    private void handleAdd(ActionEvent event) {
        // Slide in the side panel with transition
        sidePanel.setVisible(true);  // Make sure the panel is visible
        TranslateTransition slideInTransition = new TranslateTransition(Duration.seconds(0.5), sidePanel);
        slideInTransition.setToX(0); // Slide to the right
        slideInTransition.play();
    }

    private void handleSubmitAdd(ActionEvent event) {
        // Logic to add a new transport
        try {
            String type = transportTypeField.getValue();
            int capacity = Integer.parseInt(transportCapacityField.getText());
            double price = Double.parseDouble(transportPriceField.getText());

            Transport newTransport = new Transport(type, capacity, price);
            serviceTransport.ajouter(newTransport); // Add the new transport to the database
            transports.add(newTransport); // Add the new transport to the table view
            loadData();  // Refresh data
            clearAddForm();  // Clear form after submission
            closeSidePanel(); // Close the side panel
        } catch (Exception e) {
            showAlert("Erreur lors de l'ajout du transport. V√©rifiez les informations.");
        }
    }

    private void clearAddForm() {
        // Clear the fields in the side panel form
        transportTypeField.setValue(null);;
        transportCapacityField.clear();
        transportPriceField.clear();
    }

    @FXML
    private void closeSidePanel() {
        TranslateTransition slideOutTransition = new TranslateTransition(Duration.seconds(0.5), sidePanel);
        slideOutTransition.setToX(sidePanel.getWidth()); // Slide out the panel to the right
        slideOutTransition.setOnFinished(event -> sidePanel.setVisible(false)); // Hide the panel after the animation
        slideOutTransition.play();
    }



    private void handleDelete(Transport transport) {
        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirmation");
        alert.setHeaderText("Suppression du transport");
        alert.setContentText("√ätes-vous s√ªr de vouloir supprimer ce transport ?");

        alert.showAndWait().ifPresent(response -> {
            if (response == ButtonType.OK) {
                try {
                    serviceTransport.supprimer(transport.getId_transport());
                    transports.remove(transport);
                    tabview.refresh();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    showAlert("Erreur lors de la suppression du transport.");
                }
            }
        });
    }

    private void showAlert(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle("Information");
        alert.setContentText(message);
        alert.show();
    }
}
